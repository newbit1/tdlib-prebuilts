name: tdlib-build-macos-Apple-silicon
on:
  workflow_dispatch:
permissions:
  actions: write
  contents: read
jobs:
  build-tdlib-macos-Apple-silicon:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
          
      - name: Clone TDLib and set version
        run: |
          git clone https://github.com/tdlib/td.git
          cd td
            echo "UPDATE_TDLIB=false" >> "$GITHUB_ENV"
            commit_hash="7d257dcda"
            version="1.8.55"
            git checkout $commit_hash
            echo "version=$version" >> "$GITHUB_ENV"
            echo "commit_hash=$commit_hash" >> "$GITHUB_ENV"
            echo "UPDATE_TDLIB=true" >> "$GITHUB_ENV"
          cd -

      - name: Install Build Essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          brew install gperf coreutils

          OPENSSL_INST_VER="/opt/homebrew/opt/openssl/"
          HOST_ARCH=$(uname -m)
          mkdir artifacts && ARTIFACT_DIR="${PWD}/artifacts"

          echo "OPENSSL_INST_VER=$OPENSSL_INST_VER" >> $GITHUB_ENV
          echo "HOST_ARCH=$HOST_ARCH" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV
          printf "commit_message<<EOF\n%s\n%s\nEOF\n" "TDLib Prebuilt Binaries $version" "$commit_hash Update version to $version" >> $GITHUB_ENV

      - name: Cache Lookup
        if: env.UPDATE_TDLIB == 'true'
        id: cache-lookup
        uses: actions/cache@v4
        with:
          path: td
          key: ${{ runner.os }}-openssl-${{ env.version }}-${{ hashFiles('td/example/ios/build-openssl.sh') }}
          lookup-only: true

      - name: Clean td if cache exists
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit == 'true'
        run: rm -rf td

      - name: Restore Cache
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit == 'true'
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: td
          key: ${{ runner.os }}-openssl-${{ env.version }}-${{ hashFiles('td/example/ios/build-openssl.sh') }}

      - name: Build OpenSSL for iOS watchOS tvOS visionOS and macOS
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
            SYSTEM="iOS-watchOS-tvOS-visionOS-macOS"             
            echo "Building OpenSSL for $SYSTEM"
            ./build-openssl.sh

      - name: Save Cache
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit != 'true'
        id: cache-save
        uses: actions/cache@v4
        with:
          path: td
          key: ${{ runner.os }}-openssl-${{ env.version }}-${{ hashFiles('td/example/ios/build-openssl.sh') }}
          
      - name: Build TDLib for iOS watchOS tvOS visionOS and macOS universal Release
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td/example/ios
            BUILD_TYPE="Release"
            SYSTEM="iOS-watchOS-tvOS-visionOS-macOS"            
            echo "Building TDLib for $SYSTEM $HOST_ARCH $BUILD_TYPE"    
            TDLIB_DIR="${PWD}/tdjson"

            echo "sed'ing make to maximum cores"
            sed -i '' 's/make -j3 install/make -j$(sysctl -n hw.ncpu) install/g' build.sh
            
            ./build.sh
            
            SYSTEM="iOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="macOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="tvOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="visionOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="watchOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)

      - name: Cleanup After OpenSSL
        if: env.UPDATE_TDLIB == 'true'
        run: |
          echo "checking space before openssl"
          df -h .
          cd td/example/ios
            rm -rf openssl-* Python-Apple-support/merge
          cd ..

          echo "checking space after openssl and before tmp"
          df -h .
          sudo rm -rf /tmp/*
          sudo rm -rf /var/tmp/*
          sudo rm -rf /var/log/*
          echo "checking space after tmp and before brew cleanup"
          df -h .
          brew cleanup --prune=all
          rm -rf ~/Library/Caches/Homebrew/downloads/*
          echo "checking space after brew cleanup"
          df -h .

          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Caches/com.apple.dt.Xcode
          cd td && git gc --aggressive --prune=now
          cd ..
          echo "checking space after cache cleanup"
          df -h .
          
      - name: Maximize Disk Space
        if: env.UPDATE_TDLIB == 'true'
        uses: easimon/maximize-build-space@v14
        with:
          remove_dotgit: true

      - name: Check Disk Space After
        run: df -h .

      - name: Build TDLib for iOS watchOS tvOS visionOS and macOS universal Debug
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td/example/ios
            
            BUILD_TYPE="Debug"
            SYSTEM="iOS-watchOS-tvOS-visionOS-macOS"            
            echo "Building TDLib for $SYSTEM $HOST_ARCH $BUILD_TYPE"    
            TDLIB_DIR="${PWD}/tdjson"
            rm -rf $TDLIB_DIR

            echo "sed'ing make to maximum cores"
            sed -i '' 's/make -j3 install/make -j$(sysctl -n hw.ncpu) install/g' build.sh
            
            echo "sed'ing build type Release to Debug"
            sed -i '' 's/DCMAKE_BUILD_TYPE=Release/DCMAKE_BUILD_TYPE=Debug/g' build.sh
            
            ./build.sh

            SYSTEM="iOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="macOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="tvOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="visionOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)
            
            SYSTEM="watchOS" 
            TDLIB_ZIP="tdlib-$SYSTEM-$BUILD_TYPE-$version.zip"
            echo "compressing $TDLIB_ZIP"
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$SYSTEM*/lib/*)

      - name: Upload To Artifacts Dir
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: ${{ env.ARTIFACT_DIR }}/*.zip
          retention-days: 1

      - name: Download All Artifacts
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ArtifactsDir
          path: artifacts

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'true'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_SESSION }}" ]; then
            python3 -m venv ./venv
            source ./venv/bin/activate
            python3 -m pip install --upgrade telethon==1.41.2
            TGUPLOAD="${PWD}/.github/workflows/tguploadclient.py"            
            cd artifacts
              TG_UPLOAD_FILES=$(ls *.zip)
              ls -l
            python3 $TGUPLOAD $TG_UPLOAD_FILES
          fi
