name: tdlib-build-windows-arm64
on:
  workflow_dispatch:
permissions:
  actions: write
  contents: read
jobs:
  build-tdlib-windows-arm64:
    runs-on: windows-11-arm
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
          
      - name: Clone TDLib and set version
        shell: pwsh
        run: |
          git clone https://github.com/tdlib/td.git
          cd td     
            $commit_hash = "7d257dcda"
            $version = "1.8.55"
            git checkout $commit_hash      
          cd ..
      
          $systemType = (Get-CimInstance Win32_ComputerSystem).SystemType
          $realArch = [System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLower()
      
          if ($systemType -like "*ARM64*") {
            Write-Host "Running on actual ARM64 hardware (emulated x64 shell)"
            $HOST_ARCH = "arm64"
          } else {
            $HOST_ARCH = $realArch
          }
          
          Add-Content -Path $env:GITHUB_ENV -Value "HOST_ARCH=$HOST_ARCH"
          Add-Content -Path $env:GITHUB_ENV -Value "version=$version"
          Add-Content -Path $env:GITHUB_ENV -Value "commit_hash=$commit_hash"
          Add-Content -Path $env:GITHUB_ENV -Value "UPDATE_TDLIB=true"
          
          Write-Host "realArch: $realArch"
          Write-Host "HOST_ARCH: $HOST_ARCH"

      - name: Install vcpkg arm64
        if: ${{ env.UPDATE_TDLIB == 'true' }}
        shell: pwsh
        run: |

          $BITNESS = "arm64"
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          $ARTIFACT_DIR = Join-Path $PWD "artifacts"
          $ARTIFACT_DIR = ($ARTIFACT_DIR).Replace('\', '/')
      
          Write-Host "ARTIFACT_DIR=$ARTIFACT_DIR"
          Add-Content -Path $env:GITHUB_ENV -Value "ARTIFACT_DIR=$ARTIFACT_DIR"
          Add-Content -Path $env:GITHUB_ENV -Value "BITNESS=$BITNESS"
      
          $commitMsg = "TDLib Prebuilt Binaries $($env:version)`n$($env:commit_hash) Update version to $($env:version)"
          Add-Content -Path $env:GITHUB_ENV -Value "commit_message<<EOF`n$commitMsg`nEOF"
      
          # vcpkg setup
          cd td
            #git clone https://github.com/Microsoft/vcpkg.git
            #cd vcpkg
            #git checkout bc3512a509f9d29b37346a7e7e929f9a26e66c7e
            #./bootstrap-vcpkg.bat
            #./vcpkg.exe install gperf:$BITNESS-windows openssl:$BITNESS-windows zlib:$BITNESS-windows
      
      - name: Build TDLib Windows arm64 Release
        if: ${{ env.UPDATE_TDLIB == 'true' }}
        shell: pwsh
        run: |
          cd td
            $buildType = "Release"
            $system = "Windows"
            
            $tdlibDir = Join-Path $PWD "tdlib"
            New-Item -ItemType Directory -Path $tdlibDir -Force | Out-Null
            Write-Host "Created tdlib dir: $tdlibDir"
        
            $binDir = Join-Path $tdlibDir "bin"
            New-Item -ItemType Directory -Path $binDir -Force | Out-Null
            Write-Host "Created bin dir: $binDir"
        
            $testFile = Join-Path $binDir "zlib-1.3.1.zip"
            Write-Host "Downloading to: $testFile"
            Invoke-WebRequest -Uri "https://zlib.net/fossils/zlib-1.3.1.tar.gz" -OutFile $testFile
        
            # Überprüfung der Datei
            if (Test-Path $testFile) {
              $fileSize = (Get-Item $testFile).Length
              Write-Host "Download successful! File size: $fileSize bytes"
            } else {
              Write-Error "Download failed – file not found!"
              exit 1
            }

            $tdlibZip = "tdlib-$($env:HOST_ARCH)-$buildType-$($env:version).zip"
            $tdlibFiles = "tdlib/bin"
            Write-Host "Compressing to $ARTIFACT_DIR/$tdlibZip $tdlibFiles/*"
            jar -cMf $ARTIFACT_DIR/$tdlibZip $tdlibFiles/*
            exit 0
            
            $buildType = "Release"
            $system = "Windows"
        
            Write-Host "Building TDLib for $system $($env:HOST_ARCH) $($env:BITNESS) $buildType"
        
            $tdlibDir = Join-Path $PWD "tdlib"
            $tdlibZip = "tdlib-$system-$($env:HOST_ARCH)-$($env:BITNESS)-$buildType-$($env:version).zip"
            $tdlibFiles = "tdlib/bin"
        
            Remove-Item -Path $tdlibDir -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item -Path build -Recurse -Force -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Path build -Force | Out-Null
            cd build
              #cmake -A $env:BITNESS -DCMAKE_INSTALL_PREFIX:PATH=$tdlibDir -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..
          
              #$parallelJobs = [Environment]::ProcessorCount
              #cmake --build . --parallel $parallelJobs --target install --config $buildType        
            cd ..
        
          Write-Host "Compressing to $($env:ARTIFACT_DIR)/$tdlibZip $($tdlibFiles)/*"
          jar -cMf $($env:ARTIFACT_DIR)\$tdlibZip $tdlibFiles\*

          #Add-Content -Path $env:GITHUB_ENV -Value "UPDATE_TDLIB=false"

      - name: Build TDLib Windows arm64 Debug
        if: ${{ env.UPDATE_TDLIB == 'false' }}
        shell: bash
        run: |
          cd td
            $buildType = "Debug"
            $system = "Windows"
        
            Write-Host "Building TDLib for $system $($env:HOST_ARCH) $($env:BITNESS) $buildType"
        
            $tdlibDir = Join-Path $PWD "tdlib"
            $tdlibZip = "tdlib-$system-$($env:HOST_ARCH)-$($env:BITNESS)-$buildType-$($env:version).zip"
            $tdlibFiles = "tdlib/bin"
        
            Remove-Item -Path $tdlibDir -Recurse -Force -ErrorAction SilentlyContinue
            Remove-Item -Path build -Recurse -Force -ErrorAction SilentlyContinue
            New-Item -ItemType Directory -Path build -Force | Out-Null
            cd build
              cmake -A $env:BITNESS -DCMAKE_INSTALL_PREFIX:PATH=$tdlibDir -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..
          
              $parallelJobs = [Environment]::ProcessorCount
              cmake --build . --parallel $parallelJobs --target install --config $buildType        
            cd ..
        
          Write-Host "Compressing to $($env:ARTIFACT_DIR)/$tdlibZip $($tdlibFiles)/*"
          jar -cMf $($env:ARTIFACT_DIR)\$tdlibZip $tdlibFiles\*
            
      - name: Upload To Artifacts Dir
        if: ${{ env.UPDATE_TDLIB == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: artifacts/*.zip
          retention-days: 1
          if-no-files-found: ignore

      - name: Download All Artifacts
        if: ${{ env.UPDATE_TDLIB == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: ArtifactsDir
          path: artifacts

      - name: Upload to Telegram
        if: ${{ env.UPDATE_TDLIB == 'true' }}
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        shell: bash
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_SESSION }}" ]; then
            pip3 install Telethon==1.41.2
            TGUPLOAD="${PWD}/.github/workflows/tguploadclient.py"            
            cd artifacts
              TG_UPLOAD_FILES=$(ls *.zip)
              ls -l
            python3 $TGUPLOAD $TG_UPLOAD_FILES
          fi
